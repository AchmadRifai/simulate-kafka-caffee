package achmad.rifai.cashier.service.configs;

import achmad.rifai.cashier.service.dto.RedisSaver;

import org.apache.kafka.clients.producer.ProducerConfig;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.kafka.KafkaProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.redis.connection.ReactiveRedisConnectionFactory;
import org.springframework.data.redis.core.ReactiveRedisOperations;
import org.springframework.data.redis.core.ReactiveRedisTemplate;
import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;
import org.springframework.data.redis.serializer.RedisSerializationContext;
import org.springframework.data.redis.serializer.StringRedisSerializer;

@Configuration
public class BaseConfig {
	@Value("${achmad.rifai.kafka.bootstrap-servers}")
	private String kafkaHost;

	@Bean
    ReactiveRedisTemplate<String, RedisSaver> redisTemplate(ReactiveRedisConnectionFactory factory) {
        final var serializer = new Jackson2JsonRedisSerializer<>(RedisSaver.class);
        final RedisSerializationContext.RedisSerializationContextBuilder<String, RedisSaver> context =
                RedisSerializationContext.newSerializationContext(new StringRedisSerializer());
        return new ReactiveRedisTemplate<>(factory, context.value(serializer).build());
    }

    @Bean
    ReactiveRedisOperations<String, RedisSaver> redisOps(ReactiveRedisTemplate<String, RedisSaver> template) {
        return template;
    }

    @SuppressWarnings("removal")
	@Bean
    void reactiveKafkaProducer(KafkaProperties properties) {
    	final var props = properties.buildProducerProperties();
    	props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaHost);
    }
}
