package achmad.rifai.kitchen.services;

import java.math.BigDecimal;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.ReactiveRedisTemplate;
import org.springframework.stereotype.Service;

import achmad.rifai.kitchen.dto.KafkaMessage;
import achmad.rifai.kitchen.dto.RedisSaver;
import achmad.rifai.kitchen.models.Category;
import achmad.rifai.kitchen.models.Menu;
import achmad.rifai.kitchen.models.Supplied;
import achmad.rifai.kitchen.models.SuppliedItem;
import achmad.rifai.kitchen.repositories.CategoryRepository;
import achmad.rifai.kitchen.repositories.MenuRepository;
import achmad.rifai.kitchen.repositories.SuppliedItemRepository;
import achmad.rifai.kitchen.repositories.SuppliedRepository;
import jakarta.transaction.Transactional;

@Service
public class KitchenService {

	@Autowired
	ReactiveRedisTemplate<String, RedisSaver> redisTemplate;
	@Autowired
	SuppliedRepository suppliedRepository;
	@Autowired
	CategoryRepository categoryRepository;
	@Autowired
	MenuRepository menuRepository;
	@Autowired
	SuppliedItemRepository suppliedItemRepository;
	@Autowired
	ProducerService producerService;

	@SuppressWarnings("unchecked")
	@Transactional
	public void supplying(KafkaMessage message) {
		final var cache = redisTemplate.opsForValue().getAndDelete(message.getId()).blockOptional().orElseThrow();
		final var items = (List<Map<String, Object>>) cache.getRedisLocal().get("items");
		var supplied = suppliedRepository.save(Supplied.builder()
				.email(String.valueOf(cache.getRedisLocal().get("email")))
				.id(UUID.fromString(message.getId()))
				.total(items.stream()
						.map(m -> {
							final var price = (BigDecimal) m.get("price");
							final var count = (Integer) m.get("quantity");
							return price.multiply(BigDecimal.valueOf(count));
						}).reduce(BigDecimal.ZERO, BigDecimal::add))
				.build());
		for (var item: items) {
			final var categoryName = (String) item.get("category");
			final var category = categoryRepository.findByName(categoryName)
					.orElse(categoryRepository.save(Category.builder()
							.id(UUID.randomUUID())
							.name(categoryName)
							.build()));
			final var menuName = (String) item.get("name");
			var menu = menuRepository.findByNameAndCategory(menuName, category)
					.orElse(menuRepository.save(Menu.builder()
							.category(category)
							.id(UUID.randomUUID())
							.name(menuName)
							.price(BigDecimal.ZERO)
							.stock(0)
							.build()));
			final var price = (BigDecimal) item.get("price");
			final var count = (Integer) item.get("quantity");
			suppliedItemRepository.save(SuppliedItem.builder()
					.id(UUID.randomUUID())
					.menu(menu)
					.quantity(count)
					.subtotal(price.multiply(BigDecimal.valueOf(count)))
					.supplied(supplied)
					.build());
			menu.setPrice(price.multiply(BigDecimal.valueOf(11)).divide(BigDecimal.TEN));
			menu.setStock(menu.getStock() + count);
			menu = menuRepository.save(menu);
			producerService.sendToHelper(menu);
		}
		items.stream()
			.map(m -> m.get("category"))
			.map(String::valueOf)
			.distinct()
			.map(categoryRepository::findByName)
			.map(Optional::orElseThrow)
			.forEach(producerService::sendToHelper2);
	}

	@Transactional
	public void ordering(KafkaMessage message) {
		//
	}

}
